// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YemenBooking.Infrastructure.Data.Context;

#nullable disable

namespace YemenBooking.Infrastructure.Migrations
{
    [DbContext(typeof(YemenBookingDbContext))]
    [Migration("20251031075823_AddIsIndexedToProperty")]
    partial class AddIsIndexedToProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatConversationParticipant", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatConversationParticipant");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AdminAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ActionId");

                    b.Property<int>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasComment("نوع الإجراء");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المدير");

                    b.Property<Guid>("AdminId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("تغييرات الإجراء");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الهدف");

                    b.Property<int>("TargetType")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasComment("نوع الهدف");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("وقت الإجراء");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_AdminActions_ActionType");

                    b.HasIndex("AdminId")
                        .HasDatabaseName("IX_AdminActions_AdminId");

                    b.HasIndex("AdminId1");

                    b.HasIndex("TargetType")
                        .HasDatabaseName("IX_AdminActions_TargetType");

                    b.HasIndex("AdminId", "Timestamp")
                        .HasDatabaseName("IX_AdminActions_AdminId_Timestamp");

                    b.HasIndex("TargetId", "TargetType")
                        .HasDatabaseName("IX_AdminActions_TargetId_TargetType");

                    b.ToTable("AdminActions", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("AmenityId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Amenities", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("AuditLogId");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccessful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Metadata")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLogs_Action");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AuditLogs_CreatedAt");

                    b.HasIndex("PerformedBy")
                        .HasDatabaseName("IX_AuditLogs_PerformedBy");

                    b.HasIndex("EntityType", "CreatedAt")
                        .HasDatabaseName("IX_AuditLogs_EntityType_CreatedAt");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_AuditLogs_EntityType_EntityId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BookingId")
                        .HasComment("معرف الحجز الفريد");

                    b.Property<DateTime?>("ActualCheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualCheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BookedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("تاريخ الحجز");

                    b.Property<string>("BookingSource")
                        .HasColumnType("text");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الوصول");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ المغادرة");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CustomerRating")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("integer")
                        .HasComment("عدد الضيوف");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsWalkIn")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PlatformCommissionAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("PolicySnapshot")
                        .HasColumnType("text")
                        .HasComment("لقطة السياسات وقت إنشاء الحجز (JSON)");

                    b.Property<DateTime?>("PolicySnapshotAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ حفظ لقطة السياسات");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasComment("حالة الحجز");

                    b.Property<string>("TotalPrice_Currency")
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الوحدة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("BookedAt")
                        .HasDatabaseName("IX_Bookings_BookedAt");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Bookings_IsDeleted");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Bookings_Status");

                    b.HasIndex("TotalPrice_Currency");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_Bookings_Unit_Confirmed")
                        .HasFilter("\"Status\" = 0");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Bookings_UserId");

                    b.HasIndex("CheckIn", "CheckOut")
                        .HasDatabaseName("IX_Bookings_CheckInOut");

                    b.HasIndex("UserId", "BookedAt");

                    b.HasIndex("UnitId", "CheckIn", "CheckOut")
                        .HasDatabaseName("IX_Bookings_Unit_CheckIn_CheckOut_gist");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("UnitId", "CheckIn", "CheckOut"), "gist");

                    b.ToTable("Bookings", null, t =>
                        {
                            t.Property("TotalPrice_Currency")
                                .HasColumnName("Booking_TotalPrice_Currency");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.BookingService", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الحجز");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الخدمة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("BookingServiceId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("الكمية");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("BookingId", "ServiceId");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_BookingServices_BookingId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_BookingServices_IsDeleted");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("IX_BookingServices_ServiceId");

                    b.ToTable("BookingServices", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("CanPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("YER");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NormalBalance")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_ChartOfAccounts_AccountNumber");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_ChartOfAccounts_AccountType");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_ChartOfAccounts_Category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ChartOfAccounts_IsActive");

                    b.HasIndex("NameAr")
                        .HasDatabaseName("IX_ChartOfAccounts_NameAr")
                        .HasFilter("\"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("NameAr"), new[] { "AccountNumber", "AccountType", "IsActive" });

                    b.HasIndex("NameEn")
                        .HasDatabaseName("IX_ChartOfAccounts_NameEn")
                        .HasFilter("\"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("NameEn"), new[] { "AccountNumber", "AccountType", "IsActive" });

                    b.HasIndex("ParentAccountId")
                        .HasDatabaseName("IX_ChartOfAccounts_ParentAccountId");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_ChartOfAccounts_PropertyId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ChartOfAccounts_UserId");

                    b.HasIndex("AccountType", "IsActive")
                        .HasDatabaseName("IX_ChartOfAccounts_AccountType_IsActive");

                    b.HasIndex("CanPost", "IsActive")
                        .HasDatabaseName("IX_ChartOfAccounts_PostableAccounts")
                        .HasFilter("\"CanPost\" = true AND \"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("CanPost", "IsActive"), new[] { "AccountNumber", "NameAr", "AccountType", "Balance", "ParentAccountId" });

                    b.HasIndex("IsActive", "ParentAccountId")
                        .HasDatabaseName("IX_ChartOfAccounts_TreeQuery")
                        .HasFilter("\"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "ParentAccountId"), new[] { "AccountNumber", "NameAr", "NameEn", "AccountType", "Category", "Balance", "Level", "CanPost" });

                    b.HasIndex("IsSystemAccount", "IsActive")
                        .HasDatabaseName("IX_ChartOfAccounts_SystemAccounts")
                        .HasFilter("\"IsSystemAccount\" = true AND \"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsSystemAccount", "IsActive"), new[] { "AccountNumber", "NameAr", "AccountType" });

                    b.HasIndex("Level", "IsActive")
                        .HasDatabaseName("IX_ChartOfAccounts_MainAccounts")
                        .HasFilter("\"ParentAccountId\" IS NULL AND \"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Level", "IsActive"), new[] { "AccountNumber", "NameAr", "NameEn", "AccountType", "Balance" });

                    b.HasIndex("AccountNumber", "NameAr", "NameEn")
                        .HasDatabaseName("IX_ChartOfAccounts_Search");

                    b.HasIndex("AccountType", "IsActive", "CanPost")
                        .HasDatabaseName("IX_ChartOfAccounts_TypeFilter")
                        .HasFilter("\"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("AccountType", "IsActive", "CanPost"), new[] { "AccountNumber", "NameAr", "NameEn", "Balance", "ParentAccountId", "Level" });

                    b.HasIndex("Id", "AccountType", "IsActive")
                        .HasDatabaseName("IX_ChartOfAccounts_BalanceCalculation")
                        .HasFilter("\"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "AccountType", "IsActive"), new[] { "AccountNumber", "NameAr", "Balance", "NormalBalance" });

                    b.HasIndex("ParentAccountId", "IsActive", "Level")
                        .HasDatabaseName("IX_ChartOfAccounts_SubAccounts")
                        .HasFilter("\"ParentAccountId\" IS NOT NULL AND \"IsActive\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ParentAccountId", "IsActive", "Level"), new[] { "AccountNumber", "NameAr", "NameEn", "AccountType", "Balance", "CanPost" });

                    b.ToTable("ChartOfAccounts", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("نوع المحتوى");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المحادثة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasComment("Attachment duration in seconds (audio/video)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("اسم الملف الأصلي");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("مسار الملف على الخادم");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasComment("حجم الملف بالبايت");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasComment("Additional metadata as JSON string (optional)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("URL of the thumbnail image (optional)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid")
                        .HasComment("المستخدم الذي رفع الملف");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatAttachments", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatConversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("مسار الصورة الرمزية");

                    b.Property<string>("ConversationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("نوع المحادثة: direct أو group");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("وصف المحادثة");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("هل المحادثة مؤرشفة");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("هل المحادثة صامتة");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الفندق المرتبط بالمحادثة");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("عنوان المحادثة للمجموعات");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_ChatConversations_PropertyId");

                    b.ToTable("ChatConversations", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatConversationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasComment("محتوى الرسالة");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المحادثة");

                    b.Property<Guid?>("ConversationId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationJson")
                        .HasColumnType("text")
                        .HasColumnName("Location")
                        .HasComment("بيانات الموقع بصيغة JSON");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("نوع الرسالة");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الرسالة المرد عليها");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المستخدم المرسل");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ConversationId1");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoDownloadMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("التحميل التلقائي للوسائط");

                    b.Property<bool>("BackupMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("نسخ احتياطي للرسائل");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("حجم الخط: small, medium, large");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("تنبيهات مفعلة");

                    b.Property<bool>("ShowReadReceipts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("عرض إيصالات القراءة");

                    b.Property<bool>("ShowTypingIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("عرض مؤشر الكتابة");

                    b.Property<bool>("SoundEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("صوت مفعّل");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("المظهر: light, dark, auto");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_ChatSettings_UserId");

                    b.ToTable("ChatSettings", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.City", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImagesJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("[]");

                    b.HasKey("Name");

                    b.HasIndex("Name", "Country")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ArabicCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Code");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("IX_Currencies_IsDefault");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الإضافة إلى المفضلة");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف العقار");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_Favorites_PropertyId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Favorites_UserId");

                    b.HasIndex("UserId", "PropertyId")
                        .IsUnique()
                        .HasDatabaseName("IX_Favorites_User_Property");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("GroupId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCollapsible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsExpandedByDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId", "SortOrder")
                        .HasDatabaseName("IX_FieldGroups_PropertyTypeId_SortOrder");

                    b.ToTable("FieldGroups", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroupField", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("FieldId", "GroupId");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("IX_FieldGroupFields_FieldId");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_FieldGroupFields_GroupId");

                    b.ToTable("FieldGroupFields", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FinancialTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentsJson")
                        .HasColumnType("text");

                    b.Property<string>("AutomaticSource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("BaseAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Commission")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CommissionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreditAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("YER");

                    b.Property<Guid>("DebitAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EntryType")
                        .HasColumnType("integer");

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(1m);

                    b.Property<Guid?>("FirstPartyUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("FiscalPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutomatic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReversed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Narration")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PostingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ReverseTransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondPartyUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("Tax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TaxPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("BatchNumber")
                        .HasDatabaseName("IX_FinancialTransactions_BatchNumber");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_FinancialTransactions_BookingId");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreditAccountId")
                        .HasDatabaseName("IX_FinancialTransactions_CreditAccountId");

                    b.HasIndex("DebitAccountId")
                        .HasDatabaseName("IX_FinancialTransactions_DebitAccountId");

                    b.HasIndex("EntryType")
                        .HasDatabaseName("IX_FinancialTransactions_EntryType");

                    b.HasIndex("FirstPartyUserId")
                        .HasDatabaseName("IX_FinancialTransactions_FirstPartyUserId");

                    b.HasIndex("FiscalYear")
                        .HasDatabaseName("IX_FinancialTransactions_FiscalYear");

                    b.HasIndex("IsPosted")
                        .HasDatabaseName("IX_FinancialTransactions_IsPosted");

                    b.HasIndex("IsReversed")
                        .HasDatabaseName("IX_FinancialTransactions_IsReversed");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("IX_FinancialTransactions_PaymentId");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_FinancialTransactions_PropertyId");

                    b.HasIndex("ReferenceNumber")
                        .HasDatabaseName("IX_FinancialTransactions_ReferenceNumber");

                    b.HasIndex("ReverseTransactionId");

                    b.HasIndex("SecondPartyUserId")
                        .HasDatabaseName("IX_FinancialTransactions_SecondPartyUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_FinancialTransactions_Status");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_CoveringIndex")
                        .HasFilter("\"Status\" = 3 AND \"IsPosted\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("TransactionDate"), new[] { "Amount", "DebitAccountId", "CreditAccountId", "TransactionType", "Currency" });

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_FinancialTransactions_TransactionNumber");

                    b.HasIndex("TransactionType")
                        .HasDatabaseName("IX_FinancialTransactions_TransactionType");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_FinancialTransactions_UnitId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("BookingId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_Booking_Date");

                    b.HasIndex("CreditAccountId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_Credit_Date")
                        .HasFilter("\"Status\" = 3 AND \"IsPosted\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("CreditAccountId", "TransactionDate"), new[] { "Amount", "Description", "TransactionNumber", "ReferenceNumber", "DebitAccountId" });

                    b.HasIndex("DebitAccountId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_Debit_Date")
                        .HasFilter("\"Status\" = 3 AND \"IsPosted\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("DebitAccountId", "TransactionDate"), new[] { "Amount", "Description", "TransactionNumber", "ReferenceNumber", "CreditAccountId" });

                    b.HasIndex("FirstPartyUserId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_FirstUser_Date");

                    b.HasIndex("FiscalYear", "FiscalPeriod")
                        .HasDatabaseName("IX_FinancialTransactions_FiscalYear_Period");

                    b.HasIndex("PaymentId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_Payment_Date");

                    b.HasIndex("PropertyId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_Property_Date");

                    b.HasIndex("SecondPartyUserId", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_SecondUser_Date");

                    b.HasIndex("TransactionType", "TransactionDate")
                        .HasDatabaseName("IX_FinancialTransactions_TypeSummary")
                        .HasFilter("\"Status\" = 3 AND \"IsPosted\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("TransactionType", "TransactionDate"), new[] { "Amount" });

                    b.HasIndex("FiscalYear", "FiscalPeriod", "TransactionType")
                        .HasDatabaseName("IX_FinancialTransactions_MonthlyReporting")
                        .HasFilter("\"Status\" = 3 AND \"IsPosted\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("FiscalYear", "FiscalPeriod", "TransactionType"), new[] { "Amount", "BaseAmount" });

                    b.HasIndex("TransactionDate", "DebitAccountId", "CreditAccountId")
                        .HasDatabaseName("IX_FinancialTransactions_BalanceQuery")
                        .HasFilter("\"Status\" = 3 AND \"IsPosted\" = true");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("TransactionDate", "DebitAccountId", "CreditAccountId"), new[] { "Amount", "Currency", "BaseAmount" });

                    b.HasIndex("TransactionDate", "Status", "IsPosted")
                        .HasDatabaseName("IX_FinancialTransactions_Search");

                    b.HasIndex("FiscalYear", "FiscalPeriod", "Status", "IsPosted")
                        .HasDatabaseName("IX_FinancialTransactions_Reporting");

                    b.ToTable("FinancialTransactions", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.IndexMetadata", b =>
                {
                    b.Property<string>("IndexType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("نوع الفهرس - Index type identifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("تاريخ الإنشاء - Creation timestamp");

                    b.Property<long>("FileSizeBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasComment("حجم ملف الفهرس بالبايت - Index file size in bytes");

                    b.Property<string>("LastErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("رسالة الخطأ الأخيرة - Last error message");

                    b.Property<DateTime?>("LastOptimizationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("آخر وقت تحسين - Last optimization time");

                    b.Property<Guid?>("LastProcessedId")
                        .HasColumnType("uuid")
                        .HasComment("آخر معرف تم معالجته - Last processed entity ID");

                    b.Property<DateTime>("LastUpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("آخر وقت تحديث للفهرس - Last index update time");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasComment("معلومات إضافية بصيغة JSON - Additional metadata in JSON");

                    b.Property<int>("OperationsSinceOptimization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("عدد العمليات منذ آخر تحسين - Operations since last optimization");

                    b.Property<int>("RebuildAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("عدد محاولات إعادة البناء - Rebuild attempts count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Active")
                        .HasComment("حالة الفهرس - Index status");

                    b.Property<int>("TotalRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("عدد السجلات في الفهرس - Total records in index");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("تاريخ آخر تعديل - Last update timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasComment("رقم الإصدار للتحكم في التزامن - Version for concurrency control");

                    b.HasKey("IndexType");

                    b.HasIndex("LastUpdateTime")
                        .HasDatabaseName("IX_IndexMetadata_LastUpdateTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_IndexMetadata_Status")
                        .HasFilter("\"Status\" = 'Active'");

                    b.HasIndex("Status", "LastUpdateTime")
                        .HasDatabaseName("IX_IndexMetadata_Status_LastUpdate")
                        .HasFilter("\"Status\" = 'Active'");

                    b.ToTable("IndexMetadata", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الرسالة");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("نوع التفاعل");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReactions", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("NotificationId");

                    b.Property<string>("ActionText")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BatchId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("CanDismiss")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Channels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDismissed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MessageAr")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("SentChannels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TitleAr")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.NotificationChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllowedRoles")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeletable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastNotificationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NotificationsSentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("CUSTOM");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("IX_NotificationChannels_Identifier");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_NotificationChannels_IsActive");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_NotificationChannels_Type");

                    b.HasIndex("CreatedBy", "IsActive")
                        .HasDatabaseName("IX_NotificationChannels_CreatedBy_IsActive");

                    b.ToTable("NotificationChannels", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.NotificationChannelHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("FailedDeliveries")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecipientsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("SuccessfulDeliveries")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("INFO");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("IX_NotificationChannelHistories_ChannelId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_NotificationChannelHistories_SentAt");

                    b.HasIndex("ChannelId", "SentAt")
                        .HasDatabaseName("IX_NotificationChannelHistories_ChannelId_SentAt");

                    b.ToTable("NotificationChannelHistories", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PaymentId")
                        .HasComment("معرف الدفع الفريد");

                    b.Property<string>("Amount_Currency")
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الحجز");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("GatewayTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الدفع");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasComment("طريقة الدفع");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProcessedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasComment("حالة الدفع");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("معرف المعاملة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Amount_Currency");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_Payments_BookingId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Payments_IsDeleted");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("IX_Payments_PaymentDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Payments_TransactionId")
                        .HasFilter("\"TransactionId\" IS NOT NULL");

                    b.HasIndex("BookingId", "PaymentDate")
                        .HasDatabaseName("IX_Payments_Booking_PaymentDate");

                    b.HasIndex("PaymentMethod", "PaymentDate")
                        .HasDatabaseName("IX_Payments_Method_PaymentDate");

                    b.HasIndex("Status", "PaymentDate")
                        .HasDatabaseName("IX_Payments_Status_PaymentDate");

                    b.ToTable("Payments", null, t =>
                        {
                            t.Property("Amount_Currency")
                                .HasColumnName("Payment_Amount_Currency");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PricingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PricingRuleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PercentageChange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PricingTier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Currency");

                    b.HasIndex("UnitId", "StartDate", "EndDate");

                    b.ToTable("PricingRules", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PropertyId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("BookingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndexed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("StarRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("Currency");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.HasIndex("Name", "City");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PaId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("هل المرفق متاح");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الكيان");

                    b.Property<Guid>("PtaId")
                        .HasColumnType("uuid")
                        .HasComment("معرف مرفق نوع الكيان");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyAmenities_IsDeleted");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_PropertyAmenities_PropertyId");

                    b.HasIndex("PtaId")
                        .HasDatabaseName("IX_PropertyAmenities_PtaId");

                    b.HasIndex("PropertyId", "PtaId")
                        .IsUnique()
                        .HasDatabaseName("IX_PropertyAmenities_PropertyId_PtaId");

                    b.ToTable("PropertyAmenities", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ImageId")
                        .HasComment("معرف الصورة الفريد");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("وصف الصورة");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("اسم المدينة المرتبطة بالصورة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Downloads")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasComment("مدة الفيديو بالثواني");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("هل هي الصورة الرئيسية");

                    b.Property<bool>("IsMainImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("image")
                        .HasComment("نوع الوسائط image/video");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الكيان");

                    b.Property<Guid?>("PropertyInSectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TempKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("مفتاح مؤقت لرفع الصور قبل الربط");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitInSectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("مسار الصورة");

                    b.Property<string>("VideoThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("رابط المصغرة للفيديو");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CityName");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyInSectionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TempKey");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitInSectionId");

                    b.ToTable("PropertyImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyInSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("Badge")
                        .HasColumnType("integer");

                    b.Property<string>("BadgeColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ClickCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ConversionRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DisplayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DisplayUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("MainImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("PromotionalText")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewsFromSection")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("SectionId", "PropertyId")
                        .IsUnique();

                    b.ToTable("PropertyInSections", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyInSectionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("PropertyInSectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Sizes")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TempKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VideoThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyInSectionId");

                    b.HasIndex("TempKey");

                    b.ToTable("PropertyInSectionImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PolicyId");

                    b.Property<int>("CancellationWindowDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("وصف السياسة");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MinHoursBeforeCheckIn")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumDepositPercentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الكيان");

                    b.Property<bool>("RequireFullPaymentBeforeConfirmation")
                        .HasColumnType("boolean");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("قواعد السياسة (JSON)");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasComment("نوع السياسة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyPolicies_IsDeleted");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_PropertyPolicies_PropertyId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_PropertyPolicies_PolicyType");

                    b.HasIndex("PropertyId", "Type")
                        .HasDatabaseName("IX_PropertyPolicies_PropertyId_PolicyType");

                    b.ToTable("PropertyPolicies", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ServiceId")
                        .HasComment("معرف الخدمة الفريد");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("وصف الخدمة");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("اسم الخدمة");

                    b.Property<int>("PricingModel")
                        .HasColumnType("integer")
                        .HasComment("نموذج التسعير");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الكيان");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyServices_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_PropertyServices_Name");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_PropertyServices_PropertyId");

                    b.ToTable("PropertyServices", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultAmenities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PropertyTypes", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyTypeAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PtaId");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId")
                        .HasDatabaseName("IX_PropertyTypeAmenities_AmenityId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyTypeAmenities_IsDeleted");

                    b.HasIndex("PropertyTypeId")
                        .HasDatabaseName("IX_PropertyTypeAmenities_PropertyTypeId");

                    b.HasIndex("PropertyTypeId", "AmenityId")
                        .IsUnique()
                        .HasDatabaseName("IX_PropertyTypeAmenities_PropertyTypeId_AmenityId");

                    b.ToTable("PropertyTypeAmenities", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("ReportedPropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReportedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReporterUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportedPropertyId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterUserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("معرف التقييم الفريد");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasComment("متوسط التقييم");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الحجز");

                    b.Property<int>("Cleanliness")
                        .HasColumnType("integer")
                        .HasComment("تقييم النظافة");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasComment("تعليق التقييم");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ إنشاء التقييم");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsPendingApproval")
                        .HasColumnType("boolean");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasComment("تقييم الموقع");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasComment("معرف الكيان");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseText")
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasComment("نص رد التقييم");

                    b.Property<int>("Service")
                        .HasColumnType("integer")
                        .HasComment("تقييم الخدمة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasComment("تقييم القيمة");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("IX_Reviews_BookingId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Reviews_IsDeleted");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reviews_Cleanliness", "\"Cleanliness\" >= 1 AND \"Cleanliness\" <= 5");

                            t.HasCheckConstraint("CK_Reviews_Location", "\"Location\" >= 1 AND \"Location\" <= 5");

                            t.HasCheckConstraint("CK_Reviews_Service", "\"Service\" >= 1 AND \"Service\" <= 5");

                            t.HasCheckConstraint("CK_Reviews_Value", "\"Value\" >= 1 AND \"Value\" <= 5");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("معرف الصورة الفريدة");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("نص بديل للصورة");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("تعليق توضيحي للصورة");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasComment("فئة الصورة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("ترتيب العرض");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("هل هي الصورة الرئيسية");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("اسم الملف");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid")
                        .HasComment("معرف التقييم المرتبط");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasComment("حجم الملف بالبايت");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasComment("حالة الموافقة للصورة");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("وسوم الصورة");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("نوع المحتوى");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ الرفع");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("مسار الصورة");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("RespondedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ إنشاء الرد");

                    b.Property<Guid>("RespondedBy")
                        .HasColumnType("uuid")
                        .HasComment("المستخدم الذي قام بالرد");

                    b.Property<string>("RespondedByName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)")
                        .HasComment("اسم المجيب (منسوخ)");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasComment("نص الرد على التقييم");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("IX_ReviewResponses_ReviewId");

                    b.ToTable("ReviewResponses", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SearchFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FilterId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilterOptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("IX_SearchFilters_FieldId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("SearchFilters", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SearchLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.Property<int>("ResultCount")
                        .HasColumnType("integer");

                    b.Property<string>("SearchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SearchLogs", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("BackgroundImageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CategoryClass")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColorTheme")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ColumnsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayStyle")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilterCriteria")
                        .HasColumnType("text");

                    b.Property<int?>("HomeItemsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisibleToGuests")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisibleToRegistered")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemsToShow")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("PropertyTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequiresPermission")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SortCriteria")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundImageId");

                    b.HasIndex("CityName");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SectionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Sizes")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TempKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VideoThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TempKey");

                    b.ToTable("SectionImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("StaffId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasComment("منصب الموظف");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Staff_IsDeleted");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_Staff_PropertyId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Staff_UserId");

                    b.HasIndex("UserId", "PropertyId")
                        .IsUnique()
                        .HasDatabaseName("IX_Staff_UserId_PropertyId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UnitId");

                    b.Property<int?>("AdultsCapacity")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowsCancellation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("هل تقبل الوحدة إلغاء الحجز");

                    b.Property<int>("BookingCount")
                        .HasColumnType("integer");

                    b.Property<int?>("CancellationWindowDays")
                        .HasColumnType("integer")
                        .HasComment("عدد أيام نافذة الإلغاء قبل الوصول");

                    b.Property<int?>("ChildrenCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomFeatures")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PricingMethod")
                        .HasColumnType("integer")
                        .HasComment("طريقة حساب السعر");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AllowsCancellation")
                        .HasDatabaseName("IX_Units_AllowsCancellation");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("IX_Units_IsAvailable");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Units_IsDeleted");

                    b.HasIndex("PricingMethod")
                        .HasDatabaseName("IX_Units_PricingMethod");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_Units_PropertyId");

                    b.HasIndex("UnitTypeId")
                        .HasDatabaseName("IX_Units_UnitTypeId");

                    b.HasIndex("PropertyId", "Name")
                        .IsUnique();

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UnitId", "StartDate", "EndDate");

                    b.ToTable("UnitAvailability", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ValueId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitTypeFieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_UnitFieldValues_UnitId");

                    b.HasIndex("UnitTypeFieldId")
                        .HasDatabaseName("IX_UnitFieldValues_FieldId");

                    b.ToTable("UnitFieldValues", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitInSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdultsCapacity")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowsCancellation")
                        .HasColumnType("boolean");

                    b.Property<string>("AvailabilityMessage")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("Badge")
                        .HasColumnType("integer");

                    b.Property<string>("BadgeColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CancellationWindowDays")
                        .HasColumnType("integer");

                    b.Property<int?>("ChildrenCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("ClickCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ConversionRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CustomFeatures")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DisplayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DisplayUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("MainAmenities")
                        .HasColumnType("text");

                    b.Property<string>("MainImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxStayDays")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int?>("MinStayDays")
                        .HasColumnType("integer");

                    b.Property<string>("NextAvailableDates")
                        .HasColumnType("text");

                    b.Property<int>("PricingMethod")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryFieldValues")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("PromotionalText")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("PropertyAverageRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PropertyCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PropertyStarRating")
                        .HasColumnType("integer");

                    b.Property<int>("RecentBookingsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UnitTypeIcon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewsFromSection")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UnitId");

                    b.HasIndex("SectionId", "UnitId")
                        .IsUnique();

                    b.ToTable("UnitInSections", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitInSectionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Sizes")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TempKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UnitInSectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VideoThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("TempKey");

                    b.HasIndex("UnitInSectionId");

                    b.ToTable("UnitInSectionImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UnitTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultPricingRules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHasAdults")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHasChildren")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiDays")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredToDetermineTheHour")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasComment("الحد الأقصى للسعة");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("اسم نوع الوحدة");

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnType("uuid")
                        .HasComment("معرف نوع الكيان");

                    b.Property<decimal?>("SystemCommissionRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("نسبة عمولة النظام لبوكن لهذا النوع");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("Name", "PropertyTypeId")
                        .IsUnique();

                    b.ToTable("UnitTypes", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitTypeField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FieldId");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FieldOptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FieldTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsForUnits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimaryFilter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSearchable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("ShowInCards")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ValidationRules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId", "FieldName")
                        .IsUnique()
                        .HasDatabaseName("IX_UnitTypeFields_PropertyTypeId_FieldName");

                    b.ToTable("UnitTypeFields", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("المدينة (اختياري)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("الدولة (اختياري)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("رمز تأكيد البريد الإلكتروني");

                    b.Property<DateTime?>("EmailConfirmationTokenExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("انتهاء صلاحية رمز تأكيد البريد الإلكتروني");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("حالة تأكيد البريد الإلكتروني");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ التحقق من البريد الإلكتروني");

                    b.Property<string>("FavoritesJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("[]")
                        .HasComment("قائمة مفضلة المستخدم بصيغة JSON");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("هل تم التحقق من البريد الإلكتروني");

                    b.Property<bool>("IsPhoneNumberVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ آخر تسجيل دخول");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("تاريخ آخر ظهور");

                    b.Property<string>("LoyaltyTier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("فئة الولاء (اختياري)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("رمز إعادة تعيين كلمة المرور");

                    b.Property<DateTime?>("PasswordResetTokenExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("انتهاء صلاحية رمز إعادة تعيين كلمة المرور");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhoneNumberConfirmationCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PhoneNumberConfirmationCodeExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PhoneNumberVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("رابط صورة الملف الشخصي (اختياري)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("SettingsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}")
                        .HasComment("إعدادات المستخدم بصيغة JSON");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("معرف المنطقة الزمنية للمستخدم (اختياري)");

                    b.Property<decimal>("TotalSpent")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("إجمالي المبلغ المنفق");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Users_Name_trgm");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_Users_Phone");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastNotificationReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("NotificationsReceivedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubscribedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UnsubscribedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserChannels_IsActive");

                    b.HasIndex("ChannelId", "IsActive")
                        .HasDatabaseName("IX_UserChannels_ChannelId_IsActive");

                    b.HasIndex("UserId", "ChannelId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserChannels_UserId_ChannelId");

                    b.ToTable("UserChannels", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("UserRoleId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserRoles_IsDeleted");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalSettings")
                        .HasColumnType("text");

                    b.Property<bool>("BookingNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PreferredCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("PromotionalNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("ChatConversationParticipant", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AdminAction", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Booking", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("TotalPrice_Currency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("Bookings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("TotalPrice_Amount")
                                .HasComment("مبلغ السعر الإجمالي");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("TotalPrice_Currency")
                                .HasComment("عملة السعر الإجمالي");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("numeric");

                            b1.HasKey("BookingId");

                            b1.ToTable("Bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId");
                        });

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.BookingService", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyService", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingServiceBookingId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BookingServiceServiceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("TotalPrice_Amount")
                                .HasComment("مبلغ السعر الإجمالي للخدمة");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("TotalPrice_Currency")
                                .HasComment("عملة السعر الإجمالي للخدمة");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("numeric");

                            b1.HasKey("BookingServiceBookingId", "BookingServiceServiceId");

                            b1.ToTable("BookingServices");

                            b1.WithOwner()
                                .HasForeignKey("BookingServiceBookingId", "BookingServiceServiceId");
                        });

                    b.Navigation("Booking");

                    b.Navigation("Service");

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChartOfAccount", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChartOfAccount", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAccount");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatAttachment", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.ChatMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Message");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatConversation", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatMessage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId1");

                    b.HasOne("YemenBooking.Core.Entities.ChatMessage", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("YemenBooking.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Favorite", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroup", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitType", "UnitType")
                        .WithMany("FieldGroups")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroupField", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitTypeField", "UnitTypeField")
                        .WithMany("FieldGroupFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.FieldGroup", "FieldGroup")
                        .WithMany("FieldGroupFields")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldGroup");

                    b.Navigation("UnitTypeField");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.User", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.ChartOfAccount", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.ChartOfAccount", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "FirstPartyUser")
                        .WithMany()
                        .HasForeignKey("FirstPartyUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.FinancialTransaction", "ReverseTransaction")
                        .WithMany()
                        .HasForeignKey("ReverseTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.User", "SecondPartyUser")
                        .WithMany()
                        .HasForeignKey("SecondPartyUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Booking");

                    b.Navigation("CancelledByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("FirstPartyUser");

                    b.Navigation("Payment");

                    b.Navigation("Property");

                    b.Navigation("ReverseTransaction");

                    b.Navigation("SecondPartyUser");

                    b.Navigation("Unit");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.MessageReaction", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatMessage", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Notification", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.NotificationChannel", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.NotificationChannelHistory", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.NotificationChannel", "Channel")
                        .WithMany("NotificationHistories")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Channel");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Payment", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("Amount_Currency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Amount_Amount")
                                .HasComment("مبلغ الدفع");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("Amount_Currency")
                                .HasComment("عملة الدفع");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("numeric");

                            b1.HasKey("PaymentId");

                            b1.HasIndex("Amount")
                                .HasDatabaseName("IX_Payments_Amount_Amount");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PricingRule", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Currency", "CurrencyRef")
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("PricingRules")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyRef");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Property", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.City", "CityRef")
                        .WithMany("Properties")
                        .HasForeignKey("City")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Currency", null)
                        .WithMany("Properties")
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CityRef");

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyAmenity", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Amenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyTypeAmenity", "PropertyTypeAmenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PtaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "ExtraCost", b1 =>
                        {
                            b1.Property<Guid>("PropertyAmenityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("ExtraCost_Amount")
                                .HasComment("مبلغ التكلفة الإضافية");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("ExtraCost_Currency")
                                .HasComment("عملة التكلفة الإضافية");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("numeric");

                            b1.HasKey("PropertyAmenityId");

                            b1.ToTable("PropertyAmenities");

                            b1.WithOwner()
                                .HasForeignKey("PropertyAmenityId");
                        });

                    b.Navigation("ExtraCost")
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PropertyTypeAmenity");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.City", "City")
                        .WithMany("Images")
                        .HasForeignKey("CityName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.PropertyInSection", "PropertyInSection")
                        .WithMany()
                        .HasForeignKey("PropertyInSectionId");

                    b.HasOne("YemenBooking.Core.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("Images")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.UnitInSection", "UnitInSection")
                        .WithMany()
                        .HasForeignKey("UnitInSectionId");

                    b.Navigation("City");

                    b.Navigation("Property");

                    b.Navigation("PropertyInSection");

                    b.Navigation("Section");

                    b.Navigation("Unit");

                    b.Navigation("UnitInSection");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyInSection", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("PropertyInSections")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Section", "Section")
                        .WithMany("PropertyItems")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyInSectionImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.PropertyInSection", "PropertyInSection")
                        .WithMany("AdditionalImages")
                        .HasForeignKey("PropertyInSectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PropertyInSection");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyPolicy", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Policies")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyService", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Services")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PropertyServiceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Price_Amount")
                                .HasComment("مبلغ سعر الخدمة");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("Price_Currency")
                                .HasComment("عملة سعر الخدمة");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("numeric");

                            b1.HasKey("PropertyServiceId");

                            b1.ToTable("PropertyServices");

                            b1.WithOwner()
                                .HasForeignKey("PropertyServiceId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyTypeAmenity", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Amenity", "Amenity")
                        .WithMany("PropertyTypeAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyType", "PropertyType")
                        .WithMany("PropertyTypeAmenities")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Report", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "ReportedProperty")
                        .WithMany("Reports")
                        .HasForeignKey("ReportedPropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.User", "ReportedUser")
                        .WithMany("ReportsAgainstUser")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.User", "ReporterUser")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReportedProperty");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Review", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewResponse", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Review", "Review")
                        .WithMany("Responses")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SearchFilter", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitTypeField", "UnitTypeField")
                        .WithMany("SearchFilters")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.UnitType", null)
                        .WithMany("SearchFilters")
                        .HasForeignKey("UnitTypeId");

                    b.Navigation("UnitTypeField");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Section", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.SectionImage", null)
                        .WithMany()
                        .HasForeignKey("BackgroundImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.City", null)
                        .WithMany()
                        .HasForeignKey("CityName")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SectionImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Section", "Section")
                        .WithMany("Images")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Section");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Staff", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Staff")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany("StaffPositions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Unit", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.UnitType", "UnitType")
                        .WithMany("Units")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("UnitId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("BasePrice_Amount")
                                .HasComment("مبلغ السعر الأساسي");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("BasePrice_Currency")
                                .HasComment("عملة السعر الأساسي");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("numeric");

                            b1.HasKey("UnitId");

                            b1.ToTable("Units");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitAvailability", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("Availabilities")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("UnitAvailabilities")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitFieldValue", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("FieldValues")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.UnitTypeField", "UnitTypeField")
                        .WithMany("UnitFieldValues")
                        .HasForeignKey("UnitTypeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("UnitTypeField");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitInSection", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("UnitInSections")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Section", "Section")
                        .WithMany("UnitItems")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("UnitInSections")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Section");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitInSectionImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitInSection", "UnitInSection")
                        .WithMany("AdditionalImages")
                        .HasForeignKey("UnitInSectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UnitInSection");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitType", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.PropertyType", "PropertyType")
                        .WithMany("UnitTypes")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitTypeField", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitType", "UnitType")
                        .WithMany("UnitTypeFields")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserChannel", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.NotificationChannel", "Channel")
                        .WithMany("UserChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserRole", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserSettings", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Amenity", b =>
                {
                    b.Navigation("PropertyTypeAmenities");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Booking", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("BookingServices");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChartOfAccount", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatConversation", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.City", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Currency", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroup", b =>
                {
                    b.Navigation("FieldGroupFields");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.NotificationChannel", b =>
                {
                    b.Navigation("NotificationHistories");

                    b.Navigation("UserChannels");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Property", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Images");

                    b.Navigation("Policies");

                    b.Navigation("PropertyInSections");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("Staff");

                    b.Navigation("UnitInSections");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyInSection", b =>
                {
                    b.Navigation("AdditionalImages");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyService", b =>
                {
                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("PropertyTypeAmenities");

                    b.Navigation("UnitTypes");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyTypeAmenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Review", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Section", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PropertyItems");

                    b.Navigation("UnitItems");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Unit", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FieldValues");

                    b.Navigation("Images");

                    b.Navigation("PricingRules");

                    b.Navigation("UnitAvailabilities");

                    b.Navigation("UnitInSections");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitInSection", b =>
                {
                    b.Navigation("AdditionalImages");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitType", b =>
                {
                    b.Navigation("FieldGroups");

                    b.Navigation("SearchFilters");

                    b.Navigation("UnitTypeFields");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitTypeField", b =>
                {
                    b.Navigation("FieldGroupFields");

                    b.Navigation("SearchFilters");

                    b.Navigation("UnitFieldValues");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Properties");

                    b.Navigation("ReportsAgainstUser");

                    b.Navigation("ReportsMade");

                    b.Navigation("StaffPositions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
