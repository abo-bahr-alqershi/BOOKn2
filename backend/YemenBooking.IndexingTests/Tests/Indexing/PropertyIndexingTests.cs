using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using YemenBooking.Core.Entities;
using YemenBooking.Core.Indexing.Models;

namespace YemenBooking.IndexingTests.Tests.Indexing
{
    /// <summary>
    /// ุงุฎุชุจุงุฑุงุช ููุฑุณุฉ ุงูุนูุงุฑุงุช
    /// ุชุบุทู ุฌููุน ุณููุงุฑูููุงุช ููุฑุณุฉ ุงูุนูุงุฑุงุช ูุงููุญุฏุงุช
    /// </summary>
    public class PropertyIndexingTests : TestBase
    {
        public PropertyIndexingTests(TestDatabaseFixture fixture, ITestOutputHelper output)
            : base(fixture, output)
        {
        }

        #region ุงุฎุชุจุงุฑุงุช ุงูููุฑุณุฉ ุงูุฃุณุงุณูุฉ

        /// <summary>
        /// ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ูุงุญุฏ ุจุณูุท
        /// </summary>
        [Fact]
        public async Task Test_IndexSingleProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ูุงุญุฏ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(
                name: "ููุฏู ุงูุงุฎุชุจุงุฑ",
                city: "ุตูุนุงุก",
                minPrice: 150
            );

            // ุงูุชูููุฐ
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ููุฏู ุงูุงุฎุชุจุงุฑ",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.True(result.TotalCount >= 1);
            Assert.Contains(result.Properties, p => p.Name == "ููุฏู ุงูุงุฎุชุจุงุฑ");

            _output.WriteLine($"โ ุชู ููุฑุณุฉ ุงูุนูุงุฑ ุจูุฌุงุญ - ID: {property.Id}");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑุงุช ูุชุนุฏุฏุฉ
        /// </summary>
        [Theory]
        [InlineData(5)]
        [InlineData(10)]
        [InlineData(20)]
        public async Task Test_IndexMultipleProperties_Success(int count)
        {
            _output.WriteLine($"๐ ุงุฎุชุจุงุฑ ููุฑุณุฉ {count} ุนูุงุฑ...");

            // ุงูุฅุนุฏุงุฏ
            var properties = new List<Property>();
            for (int i = 0; i < count; i++)
            {
                var property = await CreateTestPropertyAsync(
                    name: $"ุนูุงุฑ ุฑูู {i + 1}",
                    city: i % 2 == 0 ? "ุตูุนุงุก" : "ุนุฏู"
                );
                properties.Add(property);
            }

            // ุงูุชูููุฐ
            foreach (var property in properties)
            {
                await _indexingService.OnPropertyCreatedAsync(property.Id);
            }

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                PageNumber = 1,
                PageSize = 50
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.True(result.TotalCount >= count);

            _output.WriteLine($"โ ุชู ููุฑุณุฉ {count} ุนูุงุฑ ุจูุฌุงุญ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ูุน ูุญุฏุงุช ูุชุนุฏุฏุฉ
        /// </summary>
        [Fact]
        public async Task Test_IndexPropertyWithUnits_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ูุน ูุญุฏุงุช...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(name: "ููุฏู ูุน ูุญุฏุงุช");
            await CreateTestUnitsForPropertyAsync(property.Id, 5);

            // ุงูุชูููุฐ
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ููุฏู ูุน ูุญุฏุงุช",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            var foundProperty = result.Properties.FirstOrDefault(p => p.Name == "ููุฏู ูุน ูุญุฏุงุช");
            Assert.NotNull(foundProperty);
            Assert.True(foundProperty.UnitsCount > 0);

            _output.WriteLine($"โ ุชู ููุฑุณุฉ ุงูุนูุงุฑ ูุน {foundProperty.UnitsCount} ูุญุฏุฉ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ุบูุฑ ูุดุท
        /// </summary>
        [Fact]
        public async Task Test_IndexInactiveProperty_NotInSearchResults()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ุบูุฑ ูุดุท...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(
                name: "ุนูุงุฑ ุบูุฑ ูุดุท",
                isActive: false
            );

            // ุงูุชูููุฐ
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ุบูุฑ ูุดุท",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.DoesNotContain(result.Properties, p => p.Name == "ุนูุงุฑ ุบูุฑ ูุดุท");

            _output.WriteLine("โ ุงูุนูุงุฑ ุบูุฑ ุงููุดุท ูุง ูุธูุฑ ูู ูุชุงุฆุฌ ุงูุจุญุซ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ุบูุฑ ูุนุชูุฏ
        /// </summary>
        [Fact]
        public async Task Test_IndexUnapprovedProperty_NotInSearchResults()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ููุฑุณุฉ ุนูุงุฑ ุบูุฑ ูุนุชูุฏ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(
                name: "ุนูุงุฑ ุบูุฑ ูุนุชูุฏ",
                isApproved: false
            );

            // ุงูุชูููุฐ
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ุบูุฑ ูุนุชูุฏ",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.DoesNotContain(result.Properties, p => p.Name == "ุนูุงุฑ ุบูุฑ ูุนุชูุฏ");

            _output.WriteLine("โ ุงูุนูุงุฑ ุบูุฑ ุงููุนุชูุฏ ูุง ูุธูุฑ ูู ูุชุงุฆุฌ ุงูุจุญุซ");
        }

        #endregion

        #region ุงุฎุชุจุงุฑุงุช ุงูุชุญุฏูุซ ูุงูุญุฐู

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุนูุงุฑ ูููุฑุณ
        /// </summary>
        [Fact]
        public async Task Test_UpdateIndexedProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุนูุงุฑ ูููุฑุณ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(
                name: "ุนูุงุฑ ูุจู ุงูุชุญุฏูุซ",
                city: "ุตูุนุงุก"
            );
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญุฏูุซ
            property.Name = "ุนูุงุฑ ุจุนุฏ ุงูุชุญุฏูุซ";
            property.City = "ุนุฏู";
            _dbContext.Properties.Update(property);
            await _dbContext.SaveChangesAsync();

            await _indexingService.OnPropertyUpdatedAsync(property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ุจุนุฏ ุงูุชุญุฏูุซ",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            var updatedProperty = result.Properties.FirstOrDefault(p => p.Id == property.Id.ToString());
            Assert.NotNull(updatedProperty);
            Assert.Equal("ุนูุงุฑ ุจุนุฏ ุงูุชุญุฏูุซ", updatedProperty.Name);
            Assert.Equal("ุนุฏู", updatedProperty.City);

            _output.WriteLine("โ ุชู ุชุญุฏูุซ ุงูุนูุงุฑ ูู ุงูููุฑุณ ุจูุฌุงุญ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุญุฐู ุนูุงุฑ ูููุฑุณ
        /// </summary>
        [Fact]
        public async Task Test_DeleteIndexedProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุญุฐู ุนูุงุฑ ูููุฑุณ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(name: "ุนูุงุฑ ููุญุฐู");
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญูู ูู ูุฌูุฏ ุงูุนูุงุฑ
            var searchBeforeDelete = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ููุญุฐู",
                PageNumber = 1,
                PageSize = 10
            };

            var resultBefore = await _indexingService.SearchAsync(searchBeforeDelete);
            Assert.Contains(resultBefore.Properties, p => p.Name == "ุนูุงุฑ ููุญุฐู");

            // ุงูุญุฐู
            await _indexingService.OnPropertyDeletedAsync(property.Id);

            // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏ ุงูุนูุงุฑ
            var resultAfter = await _indexingService.SearchAsync(searchBeforeDelete);
            Assert.DoesNotContain(resultAfter.Properties, p => p.Id == property.Id.ToString());

            _output.WriteLine("โ ุชู ุญุฐู ุงูุนูุงุฑ ูู ุงูููุฑุณ ุจูุฌุงุญ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุนูุงุฑ ูู ูุดุท ุฅูู ุบูุฑ ูุดุท
        /// </summary>
        [Fact]
        public async Task Test_DeactivateProperty_RemovedFromSearch()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุฅูุบุงุก ุชูุดูุท ุนูุงุฑ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(
                name: "ุนูุงุฑ ูุดุท",
                isActive: true
            );
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญูู ูู ูุฌูุฏู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ูุดุท",
                PageNumber = 1,
                PageSize = 10
            };

            var resultBefore = await _indexingService.SearchAsync(searchRequest);
            Assert.Contains(resultBefore.Properties, p => p.Name == "ุนูุงุฑ ูุดุท");

            // ุฅูุบุงุก ุงูุชูุดูุท
            property.IsActive = false;
            _dbContext.Properties.Update(property);
            await _dbContext.SaveChangesAsync();
            await _indexingService.OnPropertyUpdatedAsync(property.Id);

            // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏู
            var resultAfter = await _indexingService.SearchAsync(searchRequest);
            Assert.DoesNotContain(resultAfter.Properties, p => p.Name == "ุนูุงุฑ ูุดุท");

            _output.WriteLine("โ ุชู ุฅุฒุงูุฉ ุงูุนูุงุฑ ุบูุฑ ุงููุดุท ูู ุงูุจุญุซ");
        }

        #endregion

        #region ุงุฎุชุจุงุฑุงุช ุงููุญุฏุงุช

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ูุญุฏุฉ ูุนูุงุฑ ูููุฑุณ
        /// </summary>
        [Fact]
        public async Task Test_AddUnitToIndexedProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ูุญุฏุฉ ูุนูุงุฑ ูููุฑุณ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(name: "ุนูุงุฑ ุจุฏูู ูุญุฏุงุช");
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุฅุถุงูุฉ ูุญุฏุฉ
            var unit = new Unit
            {
                Id = Guid.NewGuid(),
                PropertyId = property.Id,
                Name = "ูุญุฏุฉ ุฌุฏูุฏุฉ",
                UnitTypeId = Guid.Parse("20000000-0000-0000-0000-000000000001"),
                MaxCapacity = 4,
                IsAvailable = true,
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                BasePrice = new Money { Amount = 200, Currency = "YER", ExchangeRate = 1 }
            };

            _dbContext.Units.Add(unit);
            await _dbContext.SaveChangesAsync();

            await _indexingService.OnUnitCreatedAsync(unit.Id, property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ุจุฏูู ูุญุฏุงุช",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);
            var updatedProperty = result.Properties.FirstOrDefault(p => p.Id == property.Id.ToString());

            Assert.NotNull(updatedProperty);
            Assert.True(updatedProperty.UnitsCount > 0);

            _output.WriteLine($"โ ุชู ุชุญุฏูุซ ุนุฏุฏ ุงููุญุฏุงุช: {updatedProperty.UnitsCount}");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุชุญุฏูุซ ูุญุฏุฉ ูู ุนูุงุฑ ูููุฑุณ
        /// </summary>
        [Fact]
        public async Task Test_UpdateUnitInIndexedProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุชุญุฏูุซ ูุญุฏุฉ ูู ุนูุงุฑ ูููุฑุณ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(name: "ุนูุงุฑ ูุน ูุญุฏุฉ");
            var unit = new Unit
            {
                Id = Guid.NewGuid(),
                PropertyId = property.Id,
                Name = "ูุญุฏุฉ ูุจู ุงูุชุญุฏูุซ",
                UnitTypeId = Guid.Parse("20000000-0000-0000-0000-000000000001"),
                MaxCapacity = 2,
                IsAvailable = true,
                IsActive = true,
                BasePrice = new Money { Amount = 100, Currency = "YER", ExchangeRate = 1 }
            };

            _dbContext.Units.Add(unit);
            await _dbContext.SaveChangesAsync();

            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญุฏูุซ
            unit.MaxCapacity = 4;
            unit.BasePrice = new Money { Amount = 200, Currency = "YER", ExchangeRate = 1 };
            _dbContext.Units.Update(unit);
            await _dbContext.SaveChangesAsync();

            await _indexingService.OnUnitUpdatedAsync(unit.Id, property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                GuestsCount = 4,
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);
            var foundProperty = result.Properties.FirstOrDefault(p => p.Id == property.Id.ToString());

            Assert.NotNull(foundProperty);
            Assert.True(foundProperty.MaxCapacity >= 4);

            _output.WriteLine("โ ุชู ุชุญุฏูุซ ุจูุงูุงุช ุงููุญุฏุฉ ูู ุงูููุฑุณ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุญุฐู ูุญุฏุฉ ูู ุนูุงุฑ ูููุฑุณ
        /// </summary>
        [Fact]
        public async Task Test_DeleteUnitFromIndexedProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุญุฐู ูุญุฏุฉ ูู ุนูุงุฑ ูููุฑุณ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(name: "ุนูุงุฑ ูุน ูุญุฏุชูู");
            await CreateTestUnitsForPropertyAsync(property.Id, 2);
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุญุตูู ุนูู ูุญุฏุฉ ููุญุฐู
            var unit = _dbContext.Units.First(u => u.PropertyId == property.Id);
            var unitId = unit.Id;

            // ุงูุญุฐู
            _dbContext.Units.Remove(unit);
            await _dbContext.SaveChangesAsync();

            await _indexingService.OnUnitDeletedAsync(unitId, property.Id);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ูุน ูุญุฏุชูู",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);
            var updatedProperty = result.Properties.FirstOrDefault(p => p.Id == property.Id.ToString());

            Assert.NotNull(updatedProperty);
            Assert.Equal(1, updatedProperty.UnitsCount);

            _output.WriteLine($"โ ุชู ุชุญุฏูุซ ุนุฏุฏ ุงููุญุฏุงุช ุจุนุฏ ุงูุญุฐู: {updatedProperty.UnitsCount}");
        }

        #endregion

        #region ุงุฎุชุจุงุฑุงุช ุฅุนุงุฏุฉ ุงูุจูุงุก

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุฅุนุงุฏุฉ ุจูุงุก ุงูููุฑุณ ุจุงููุงูู
        /// </summary>
        [Fact]
        public async Task Test_RebuildIndex_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุฅุนุงุฏุฉ ุจูุงุก ุงูููุฑุณ ุจุงููุงูู...");

            // ุงูุฅุนุฏุงุฏ - ุฅูุดุงุก ุจูุงูุงุช
            var properties = await CreateComprehensiveTestDataAsync();
            _output.WriteLine($"๐ ุชู ุฅูุดุงุก {properties.Count} ุนูุงุฑ ููุงุฎุชุจุงุฑ");

            // ุงูุชูููุฐ - ุฅุนุงุฏุฉ ุงูุจูุงุก
            var (_, elapsedMs) = await MeasureExecutionTimeAsync(
                async () =>
                {
                    await _indexingService.RebuildIndexAsync();
                    return true;
                },
                "ุฅุนุงุฏุฉ ุจูุงุก ุงูููุฑุณ"
            );

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                PageNumber = 1,
                PageSize = 100
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.True(result.TotalCount >= properties.Count(p => p.IsActive && p.IsApproved));
            Assert.True(elapsedMs < 10000, $"ุฅุนุงุฏุฉ ุงูุจูุงุก ุงุณุชุบุฑูุช {elapsedMs}ms (ูุฌุจ ุฃู ุชููู ุฃูู ูู 10 ุซุงููุฉ)");

            _output.WriteLine($"โ ุชู ุฅุนุงุฏุฉ ุจูุงุก ุงูููุฑุณ ุจูุฌุงุญ - {result.TotalCount} ุนูุงุฑ ูููุฑุณ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุฅุนุงุฏุฉ ุงูุจูุงุก ูุน ุจูุงูุงุช ุชุงููุฉ
        /// </summary>
        [Fact]
        public async Task Test_RebuildIndexWithCorruptedData_HandlesGracefully()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุฅุนุงุฏุฉ ุงูุจูุงุก ูุน ุจูุงูุงุช ุชุงููุฉ...");

            // ุงูุฅุนุฏุงุฏ - ุฅูุดุงุก ุนูุงุฑ ุจุฏูู owner
            var property = new Property
            {
                Id = Guid.NewGuid(),
                Name = "ุนูุงุฑ ุชุงูู",
                City = "ุตูุนุงุก",
                TypeId = Guid.Parse("30000000-0000-0000-0000-000000000003"),
                OwnerId = Guid.Empty, // ูุนุฑู ุบูุฑ ุตุญูุญ
                IsActive = true,
                IsApproved = true,
                CreatedAt = DateTime.UtcNow
            };

            _dbContext.Properties.Add(property);
            await _dbContext.SaveChangesAsync();

            // ุงูุชูููุฐ - ูุฌุจ ุฃูุง ููุดู
            var exception = await Record.ExceptionAsync(async () =>
            {
                await _indexingService.RebuildIndexAsync();
            });

            Assert.Null(exception);

            _output.WriteLine("โ ุชู ุงูุชุนุงูู ูุน ุงูุจูุงูุงุช ุงูุชุงููุฉ ุจูุฌุงุญ");
        }

        #endregion

        #region ุงุฎุชุจุงุฑุงุช ุงูุชุฒุงูู

        /// <summary>
        /// ุงุฎุชุจุงุฑ ููุฑุณุฉ ูุชุฒุงููุฉ ูุนุฏุฉ ุนูุงุฑุงุช
        /// </summary>
        [Fact]
        public async Task Test_ConcurrentIndexing_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุงูููุฑุณุฉ ุงููุชุฒุงููุฉ...");

            // ุงูุฅุนุฏุงุฏ
            var properties = new List<Property>();
            for (int i = 0; i < 10; i++)
            {
                properties.Add(await CreateTestPropertyAsync(
                    name: $"ุนูุงุฑ ูุชุฒุงูู {i}",
                    city: "ุตูุนุงุก"
                ));
            }

            // ุงูุชูููุฐ ุงููุชุฒุงูู
            var tasks = properties.Select(p => 
                Task.Run(async () => await _indexingService.OnPropertyCreatedAsync(p.Id))
            ).ToArray();

            await Task.WhenAll(tasks);

            // ุงูุชุญูู
            var searchRequest = new PropertySearchRequest
            {
                City = "ุตูุนุงุก",
                PageNumber = 1,
                PageSize = 20
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.True(result.TotalCount >= 10);

            _output.WriteLine($"โ ุชูุช ุงูููุฑุณุฉ ุงููุชุฒุงููุฉ ูู {properties.Count} ุนูุงุฑ");
        }

        /// <summary>
        /// ุงุฎุชุจุงุฑ ุชุญุฏูุซุงุช ูุชุฒุงููุฉ ุนูู ููุณ ุงูุนูุงุฑ
        /// </summary>
        [Fact]
        public async Task Test_ConcurrentUpdatesOnSameProperty_Success()
        {
            _output.WriteLine("๐ ุงุฎุชุจุงุฑ ุงูุชุญุฏูุซุงุช ุงููุชุฒุงููุฉ ุนูู ููุณ ุงูุนูุงุฑ...");

            // ุงูุฅุนุฏุงุฏ
            var property = await CreateTestPropertyAsync(name: "ุนูุงุฑ ููุชุญุฏูุซ ุงููุชุฒุงูู");
            await _indexingService.OnPropertyCreatedAsync(property.Id);

            // ุงูุชุญุฏูุซุงุช ุงููุชุฒุงููุฉ
            var updateTasks = new List<Task>();
            for (int i = 0; i < 5; i++)
            {
                var localI = i;
                updateTasks.Add(Task.Run(async () =>
                {
                    property.Description = $"ูุตู ูุญุฏุซ {localI}";
                    await _indexingService.OnPropertyUpdatedAsync(property.Id);
                }));
            }

            await Task.WhenAll(updateTasks);

            // ุงูุชุญูู - ูุฌุจ ุฃู ูุจูู ุงูุนูุงุฑ ููุฌูุฏุงู ูุตุญูุญุงู
            var searchRequest = new PropertySearchRequest
            {
                SearchText = "ุนูุงุฑ ููุชุญุฏูุซ ุงููุชุฒุงูู",
                PageNumber = 1,
                PageSize = 10
            };

            var result = await _indexingService.SearchAsync(searchRequest);

            Assert.NotNull(result);
            Assert.Single(result.Properties.Where(p => p.Name == "ุนูุงุฑ ููุชุญุฏูุซ ุงููุชุฒุงูู"));

            _output.WriteLine("โ ุชู ุงูุชุนุงูู ูุน ุงูุชุญุฏูุซุงุช ุงููุชุฒุงููุฉ ุจูุฌุงุญ");
        }

        #endregion
    }
}
